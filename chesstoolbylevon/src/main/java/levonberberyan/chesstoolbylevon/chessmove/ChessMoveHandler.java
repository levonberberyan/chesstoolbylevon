package levonberberyan.chesstoolbylevon.chessmove;

import levonberberyan.chesstoolbylevon.chesspiece.ChessPieceAbstractEnum;
import levonberberyan.chesstoolbylevon.chesspiece.ChessPieceSymbolicForm;

public final class ChessMoveHandler implements ChessMoveHandlerInterface{
	/*
	 * Convert UCI move calculations to symbolic move
	 * Check and Parse the move from moveString generated by Stockfish
	 * @throws UCIMoveException
	 */
	public static String uciMoveCalculationsToSymbolicMove(String theUciMoveCalculations){
		// if stockfish, if ribka, if others
		
		// stockfish: bestmove (none)
		// fruit and rybka: bestmove a1a1
		// Robolitto: bestmove NULL
				
		String move = "";
		// check if valid and contains bestmove and ponder, for Stockfish UCI
		if(theUciMoveCalculations.contains("bestmove") && theUciMoveCalculations.contains("ponder")){
			move = theUciMoveCalculations.substring(theUciMoveCalculations.indexOf("bestmove ") + 9, theUciMoveCalculations.indexOf(" ponder"));
			//System.out.println("Bestmove: " + move);
		} else{
			//throw new UCIValidMoveException();
		}
				
		return move;
	}
	/*
	 * Register Symbolic Chess Move On board
	 */
	public void registerSymbolicMove(String theSymbolicMove){
		// format: a8g7
		
		// convert symbolic move(like a7h8) to boardarr move(like [0][6]->[7][7])
		int startX = ChessPieceSymbolicForm.getXFromChessmanSymbolic(theSymbolicMove.charAt(0));
		int startY = 8 - Character.getNumericValue(theSymbolicMove.charAt(1));
		int destinationX = ChessPieceSymbolicForm.getYFromChessmanSymbolic(theSymbolicMove.charAt(2));
		int destinationY = 8 - Character.getNumericValue(theSymbolicMove.charAt(3));
		
		// get chess pieces on start and destination
		ChessPieceAbstractEnum startPiece = getAbstractChessPieceatAtXY(startY, startX);
		String destinationPiece = this.getFigureOnXY(destinationY, destinationX);
		
		// register simple move
		this.setChessPieceOnXY(destinationY, destinationX, startPiece);
		this.setChessPieceOnXY(startY, startX, null);
		
		//this.show();
		//this.showInfo();
	}
	/*
	 * Convert symbolic chess move (example:a2a3) to chess move type
	 */
	public static ChessMove convertSymbolicMoveToChessMove(String theSymbolicMove){
		int aSourceX = ChessPieceSymbolicForm.getXFromChessmanSymbolic(theSymbolicMove.charAt(0));
		int aSourceY = ChessPieceSymbolicForm.getYFromChessmanSymbolic(theSymbolicMove.charAt(1));
		int aDestinationX = ChessPieceSymbolicForm.getXFromChessmanSymbolic(theSymbolicMove.charAt(2));
		int aDestinationY = ChessPieceSymbolicForm.getYFromChessmanSymbolic(theSymbolicMove.charAt(3));
		return new ChessMove(aSourceX, aSourceY, aDestinationX, aDestinationY, null);
	}
}



